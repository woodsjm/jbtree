/*
 * This Java source file was generated by the Gradle 'init' task.
 */
package btree.java;

import java.util.Stack;



public class Btree {
     
    public static class Node {
        private Object val;
        private Node left;
        private Node right;

        // Init
        public Node(Integer value) {
            this.setVal(value);
        }

        public Node(String value) {
            this.setVal(value);
        }

        public Node(Float value) {
            this.setVal(value);
        }

        // Getters + Setters
        public Object getVal() {
            return this.val;
        }

        public void setVal(Object value) {
            this.val = value;
        }

        public Node getLeft() {
            return this.left;
        }

        public Node getRight() {
            return this.right;
        }

        public void setLeft(Node node) {
            this.left = node;
        }

        public void setRight(Node node) {
            this.right = node;
        }

        @Override
        public int hashCode() {
            return Integer.valueOf(this.getVal().toString()).intValue();
        }

        public boolean equals(Node other) {
            Stack<Node> stack1 = new Stack<>();
            stack1.push(this);
            Stack<Node> stack2 = new Stack<>();
            stack2.push(other);

            while (stack1.size() > 0 || stack2.size() > 0) {
                Node node1 = stack1.pop();
                Node node2 = stack2.pop();

                if (node1 == null && node2 == null) {
                    continue;
                } else if (node1 == null || node2 == null) {
                    return false;
                } else if (!(other instanceof Node)) {
                    return false;
                } else {
                    if (node1.getVal() instanceof Float && node2.getVal() instanceof Float) {
                        String float1 = String.format("%.2f", node1.getVal());
                        String float2 = String.format("%.2f", node2.getVal());
                        if (Float.compare(Float.valueOf(float1), Float.valueOf(float2)) != 0) {
                            return false;
                        }
                    } else if (node1.getVal() != node2.getVal()) {
                        return false;
                    }
                }
                    
                stack1.push(node1.getRight());
                stack1.push(node1.getLeft());
                stack2.push(node2.getRight());
                stack2.push(node2.getLeft());
            }

            return true;
        }

        @Override
        public String toString() {
            String nodeString = "Node()";
            
            if (this.val instanceof Integer) {
                nodeString = String.format("Node(%d)", this.getVal());
            } else if (this.val instanceof String) {
                nodeString = String.format("Node(%s)", this.getVal());
            } else if (this.val instanceof Float) {
                nodeString = String.format("Node(%.2f)", this.getVal());
            }

            return nodeString;
        }
    }

    public Btree() {}

    public static void main(String... args) {
        final String message = "\n"
            + "Btree-java is a port of the (Python) Binarytree library.\n"
            + "It has most of Binarytree's functionality, but lacks support for Graphviz and Jupyter Notebooks.\n"
            + "Btree-java includes matching unit tests.\n";
        
        System.out.println(message);
    }
}


