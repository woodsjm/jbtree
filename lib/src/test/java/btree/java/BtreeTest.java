/*
 * This Java source file was generated by the Gradle 'init' task.
 */
package btree.java;

import java.util.ArrayList;
import java.util.Arrays;
import java.util.Collections;
import java.util.List;
import java.util.concurrent.ThreadLocalRandom;

import org.junit.rules.ExpectedException;
import org.junit.Rule;
import org.junit.Test;
import static org.junit.Assert.*;

public class BtreeTest {
    @Test public void testNodeInitAndSetAttrWithIntegers() {
        Btree.Node<Integer> root = new Btree.Node<>(Integer.valueOf(1));
        assertEquals(null, root.getLeft());
        assertEquals(null, root.getRight());
        assertEquals(Integer.valueOf(1), root.getVal());
        assertEquals(String.valueOf("Node(1)"), root.toString());

        //NOTE: Missing matching tests for multinamed node value
        //attribute node.val + node.value, because current attribute 
        //implementation lacks multiple names

        Btree.Node<Integer> leftChild = new Btree.Node<>(Integer.valueOf(2));
        root.setLeft(leftChild);
        assertEquals(leftChild, root.getLeft());
        assertEquals(null, root.getRight());
        assertEquals(Integer.valueOf(1), root.getVal());
        assertEquals(null, root.getLeft().getLeft());
        assertEquals(null, root.getLeft().getRight());
        assertEquals(Integer.valueOf(2), root.getLeft().getVal());
        assertEquals(String.valueOf("Node(2)"), leftChild.toString());

        Btree.Node<Integer> rightChild = new Btree.Node<>(Integer.valueOf(3));
        root.setRight(rightChild);
        assertEquals(leftChild, root.getLeft());
        assertEquals(rightChild, root.getRight());
        assertEquals(Integer.valueOf(1), root.getVal());
        assertEquals(null, root.getRight().getLeft());
        assertEquals(null, root.getRight().getRight());
        assertEquals(Integer.valueOf(3), root.getRight().getVal());
        assertEquals(String.valueOf("Node(3)"), rightChild.toString());

        Btree.Node<Integer> lastNode = new Btree.Node<>(Integer.valueOf(4));
        leftChild.setRight(lastNode);
        assertEquals(lastNode, root.getLeft().getRight());
        assertEquals(String.valueOf("Node(4)"), root.getLeft().getRight().toString());
    }

    @Test public void testNodeInitAndSetAttrWithFloats() {
        Btree.Node<Float> root = new Btree.Node<>(Float.valueOf(1.50f));
        assertEquals(null, root.getLeft());
        assertEquals(null, root.getRight());
        assertEquals(Float.valueOf(1.50f), root.getVal());
        assertEquals(String.valueOf("Node(1.50)"), root.toString());

        //NOTE: Missing matching tests for multinamed node value
        //attribute node.val + node.value, because current attribute 
        //implementation lacks multiple names

        Btree.Node<Float> leftChild = new Btree.Node<>(Float.valueOf(2.50f));
        root.setLeft(leftChild);
        assertEquals(leftChild, root.getLeft());
        assertEquals(null, root.getRight());
        assertEquals(Float.valueOf(1.50f), root.getVal());
        assertEquals(null, root.getLeft().getLeft());
        assertEquals(null, root.getLeft().getRight());
        assertEquals(Float.valueOf(2.50f), root.getLeft().getVal());
        assertEquals(String.valueOf("Node(2.50)"), leftChild.toString());

        Btree.Node<Float> rightChild = new Btree.Node<>(Float.valueOf(3.50f));
        root.setRight(rightChild);
        assertEquals(leftChild, root.getLeft());
        assertEquals(rightChild, root.getRight());
        assertEquals(Float.valueOf(1.50f), root.getVal());
        assertEquals(null, root.getRight().getLeft());
        assertEquals(null, root.getRight().getRight());
        assertEquals(Float.valueOf(3.50f), root.getRight().getVal());
        assertEquals(String.valueOf("Node(3.50)"), rightChild.toString());

        Btree.Node<Float> lastNode = new Btree.Node<>(Float.valueOf(4.50f));
        leftChild.setRight(lastNode);
        assertEquals(lastNode, root.getLeft().getRight());
        assertEquals(String.valueOf("Node(4.50)"), root.getLeft().getRight().toString());
    }

    @Test public void testNodeInitAndSetAttrWithLetters() {
        Btree.Node<String> root = new Btree.Node<>(String.valueOf("A"));
        assertEquals(null, root.getLeft());
        assertEquals(null, root.getRight());
        assertEquals(String.valueOf("A"), root.getVal());
        assertEquals(String.valueOf("Node(A)"), root.toString());

        //NOTE: Missing matching tests for multinamed node value
        //attribute node.val + node.value, because current attribute 
        //implementation lacks multiple names

        Btree.Node<String> leftChild = new Btree.Node<>(String.valueOf("B"));
        root.setLeft(leftChild);
        assertEquals(leftChild, root.getLeft()); 
        assertEquals(null, root.getRight());
        assertEquals(String.valueOf("A"), root.getVal());
        assertEquals(null, root.getLeft().getLeft());
        assertEquals(null, root.getLeft().getRight());
        assertEquals(String.valueOf("B"), root.getLeft().getVal());
        assertEquals(String.valueOf("Node(B)"), leftChild.toString());

        Btree.Node<String> rightChild = new Btree.Node<>(String.valueOf("C"));
        root.setRight(rightChild);
        assertEquals(leftChild, root.getLeft());
        assertEquals(rightChild, root.getRight());
        assertEquals(String.valueOf("A"), root.getVal());
        assertEquals(null, root.getRight().getLeft());
        assertEquals(null, root.getRight().getRight());
        assertEquals(String.valueOf("C"), root.getRight().getVal());
        assertEquals(String.valueOf("Node(C)"), rightChild.toString());

        Btree.Node<String> lastNode = new Btree.Node<>(String.valueOf("D"));
        leftChild.setRight(lastNode);
        assertEquals(lastNode, root.getLeft().getRight());
        assertEquals(String.valueOf("Node(D)"), root.getLeft().getRight().toString());
    }

    // Test Node init and set attribtue error cases
    // NOTE: these matching exception tests are split out
    // instead of grouped into a single test as in the 
    // Python lib
    @Rule public ExpectedException exceptionRule = ExpectedException.none();
    // FIX: Modify constructor to side step default java error on init
    // with empty list 
    // @Test public void throwsNodeValueExceptionOnEmptyNode() throws Exception {
    //     exceptionRule.expect(BtreeException.NodeValueException.class);
    //     exceptionRule.expectMessage("node value must be an Integer, a Float, or a String");
    //     Btree.Node<List> root = new Btree.Node<>(Collections.emptyList());
    // }

    @Test public void throwsNodeValueExceptionOnEmptyVal() throws Exception {
        exceptionRule.expect(BtreeException.NodeValueException.class);
        exceptionRule.expectMessage("node value must be an Integer, a Float, or a String");
        Btree.Node<Integer> root = new Btree.Node<>(Integer.valueOf(1));
        root.setVal(Collections.<Integer>emptyList());
    }
    
    @Test public void testTreeEqualsWithIntegers() {
        Btree.Node<Integer> root1 = new Btree.Node<>(Integer.valueOf(1));
        Btree.Node<Integer> root2 = new Btree.Node<>(Integer.valueOf(1));
        assertFalse(root1.equals(null));
        assertFalse(root1.equals(Integer.valueOf(1)));
        assertFalse(root1.equals(new Btree.Node<>(Integer.valueOf(2))));
        assertTrue(root1.equals(root2));
        assertTrue(root2.equals(root1));

        root1.setLeft(new Btree.Node<>(Integer.valueOf(2)));
        assertFalse(root1.equals(root2));
        assertFalse(root2.equals(root1));

        root2.setLeft(new Btree.Node<>(Integer.valueOf(2)));
        assertTrue(root1.equals(root2));
        assertTrue(root2.equals(root1));

        root1.setRight(new Btree.Node<>(Integer.valueOf(3)));
        assertFalse(root1.equals(root2));
        assertFalse(root2.equals(root1));

        root2.setRight(new Btree.Node<>(Integer.valueOf(3)));
        assertTrue(root1.equals(root2));
        assertTrue(root2.equals(root1));

        root1.getRight().setLeft(new Btree.Node<>(Integer.valueOf(4)));
        assertFalse(root1.equals(root2));
        assertFalse(root2.equals(root1));

        root2.getRight().setLeft(new Btree.Node<>(Integer.valueOf(4)));
        assertTrue(root1.equals(root2));
        assertTrue(root2.equals(root1));
    }

    @Test public void testTreeEqualsWithFloats() {
        Btree.Node<Float> root1 = new Btree.Node<>(Float.valueOf(1.50f));
        Btree.Node<Float> root2 = new Btree.Node<>(Float.valueOf(1.50f));
        assertFalse(root1.equals(null));
        assertFalse(root1.equals(Float.valueOf(1.50f)));
        assertFalse(root1.equals(new Btree.Node<>(Float.valueOf(2.50f))));
        assertTrue(root1.equals(root2));
        assertTrue(root2.equals(root1));

        root1.setLeft(new Btree.Node<>(Float.valueOf(2.50f)));
        assertFalse(root1.equals(root2));
        assertFalse(root2.equals(root1));

        root2.setLeft(new Btree.Node<>(Float.valueOf(2.50f)));
        assertTrue(root1.equals(root2));
        assertTrue(root2.equals(root1));

        root1.setRight(new Btree.Node<>(Float.valueOf(3.50f)));
        assertFalse(root1.equals(root2));
        assertFalse(root2.equals(root1));

        root2.setRight(new Btree.Node<>(Float.valueOf(3.50f)));
        assertTrue(root1.equals(root2));
        assertTrue(root2.equals(root1));

        root1.getRight().setLeft(new Btree.Node<>(Float.valueOf(4.50f)));
        assertFalse(root1.equals(root2));
        assertFalse(root2.equals(root1));

        root2.getRight().setLeft(new Btree.Node<>(Float.valueOf(4.50f)));
        assertTrue(root1.equals(root2));
        assertTrue(root2.equals(root1));
    }

    @Test public void testTreeEqualsWithLetters() {
        Btree.Node<String> root1 = new Btree.Node<>(String.valueOf("A"));
        Btree.Node<String> root2 = new Btree.Node<>(String.valueOf("A"));
        assertFalse(root1.equals(null));
        assertFalse(root1.equals(String.valueOf("A")));
        assertFalse(root1.equals(new Btree.Node<>(String.valueOf("B"))));
        assertTrue(root1.equals(root2));
        assertTrue(root2.equals(root1));

        root1.setLeft(new Btree.Node<>(String.valueOf("B")));
        assertFalse(root1.equals(root2));
        assertFalse(root2.equals(root1));

        root2.setLeft(new Btree.Node<>(String.valueOf("B")));
        assertTrue(root1.equals(root2));
        assertTrue(root2.equals(root1));

        root1.setRight(new Btree.Node<>(String.valueOf("C")));
        assertFalse(root1.equals(root2));
        assertFalse(root2.equals(root1));

        root2.setRight(new Btree.Node<>(String.valueOf("C")));
        assertTrue(root1.equals(root2));
        assertTrue(root2.equals(root1));

        root1.getRight().setLeft(new Btree.Node<>(String.valueOf("D")));
        assertFalse(root1.equals(root2));
        assertFalse(root2.equals(root1));

        root2.getRight().setLeft(new Btree.Node<>(String.valueOf("D")));
        assertTrue(root1.equals(root2));
        assertTrue(root2.equals(root1));
    }

    @Test public void testTreeCloneWithNumbers() {
        for (int dummy = 0; dummy < 20; dummy++) {
            int height = ThreadLocalRandom.current().nextInt(10);
            boolean isPerfect = ThreadLocalRandom.current().nextBoolean();
            boolean letters = false;

            Btree btree = new Btree();
            Btree.Node<Integer> root = Btree.tree(height, isPerfect, letters);
            assertNotNull(root);
            Btree.Node<Integer> clone = root.deepCopy();
            assertEquals(clone.values, root.values);
            assertTrue(root.equals(clone));
            assertTrue(clone.equals(root));
            assertEquals(clone.properties, root.properties);
        }
    }

    @Test public void testTreeCloneWithLetters() {
        for (int dummy = 0; dummy < 20; dummy++) {
            int height = ThreadLocalRandom.current().nextInt(10);
            boolean isPerfect = ThreadLocalRandom.current().nextBoolean();
            boolean letters = true;

            Btree btree = new Btree();
            Btree.Node<String> root = Btree.tree(height, isPerfect, letters);
            assertNotNull(root);
            Btree.Node<String> clone = root.deepCopy();
            assertEquals(clone.values, root.values);
            assertTrue(root.equals(clone));
            assertTrue(clone.equals(root));
            assertEquals(clone.properties, root.properties);
        }
    }

    @Test public void testListRepresentation1() {
        Btree btree = new Btree();
        ArrayList<Integer> listRep = new ArrayList<Integer>();

        Btree.Node root = btree.build(new ArrayList()); // []
        assertEquals(null, root);

        listRep.addAll(Arrays.asList(1));
        root = btree.build(listRep); // [1]
        assertNotNull(root);
        assertEquals(Integer.valueOf(1), root.getVal());
        assertEquals(null, root.getLeft());
        assertEquals(null, root.getRight());

        listRep.addAll(Arrays.asList(2));
        root = btree.build(listRep); // [1, 2]
        assertNotNull(root);
        assertEquals(Integer.valueOf(1), root.getVal());
        assertNotNull(root.getLeft());
        assertEquals(Integer.valueOf(2), root.getLeft().getVal());
        assertEquals(null, root.getRight());

        listRep.addAll(Arrays.asList(3));
        root = btree.build(listRep); // [1, 2, 3]
        assertNotNull(root);
        assertEquals(Integer.valueOf(1), root.getVal());
        assertNotNull(root.getLeft());
        assertEquals(Integer.valueOf(2), root.getLeft().getVal());
        assertNotNull(root.getRight());
        assertEquals(Integer.valueOf(3), root.getRight().getVal());
        assertEquals(null, root.getLeft().getLeft());
        assertEquals(null, root.getLeft().getRight());
        assertEquals(null, root.getRight().getLeft());
        assertEquals(null, root.getRight().getRight());

        listRep.addAll(Arrays.asList(null, 4));
        root = btree.build(listRep); // [1, 2, 3, null, 4]
        assertNotNull(root);
        assertEquals(Integer.valueOf(1), root.getVal());
        assertNotNull(root.getLeft());
        assertEquals(Integer.valueOf(2), root.getLeft().getVal());
        assertNotNull(root.getRight());
        assertEquals(Integer.valueOf(3), root.getRight().getVal());
        assertEquals(null, root.getLeft().getLeft());
        assertNotNull(root.getLeft().getRight());
        assertEquals(Integer.valueOf(4), root.getLeft().getRight().getVal());
        assertEquals(null, root.getRight().getLeft());
        assertEquals(null, root.getRight().getRight());
        assertEquals(null, root.getLeft().getRight().getLeft());
        assertEquals(null, root.getLeft().getRight().getRight());

        //FIX: Missing NodeNotFoundException test for try... catch
        //block in build()
        //NOTE: Use mocking and put this in separate
        //testListRepresentation1 test
        
        listRep.clear();
        listRep.addAll(Arrays.asList(1));
        root = new Btree.Node(1); // [1]
        assertArrayEquals(listRep.toArray(), root.values().toArray());

        listRep.addAll(Arrays.asList(null, 3));
        root.setRight(new Btree.Node(3)); // [1, null, 3]
        assertArrayEquals(listRep.toArray(), root.values().toArray());

        listRep.set(1, 2);
        root.setLeft(new Btree.Node(2)); // [1, 2, 3]
        assertArrayEquals(listRep.toArray(), root.values().toArray());

        listRep.addAll(Arrays.asList(null, null, 4));
        root.getRight().setLeft(new Btree.Node(4)); // [1, 2, 3, null, null, 4]
        assertArrayEquals(listRep.toArray(), root.values().toArray());

        listRep.add(5);
        root.getRight().setRight(new Btree.Node(5)); // [1, 2, 3, null, null, 4, 5]
        assertArrayEquals(listRep.toArray(), root.values().toArray()); 

        listRep.set(3, 6);
        root.getLeft().setLeft(new Btree.Node(6)); // [1, 2, 3, 6, null, 4, 5]
        assertArrayEquals(listRep.toArray(), root.values().toArray());

        listRep.set(4, 7);
        root.getLeft().setRight(new Btree.Node(7)); // [1, 2, 3, 6, 7, 4, 5]
        assertArrayEquals(listRep.toArray(), root.values().toArray());

        for (int dummy = 0; dummy < 20; dummy++) {
            Btree.Node<Integer> tree1 = btree.tree();
            assertNotNull(tree1);

            Btree.Node<Integer> tree2 = btree.build(tree1.values());
            assertNotNull(tree2);
            
            assertArrayEquals(tree2.values().toArray(), tree1.values().toArray());
        }
    }

    @Test public void testNodeToString() {
        Integer num = Integer.valueOf(76);
        Btree.Node<Integer> intNode = new Btree.Node<>(num);
        String intNodeAsString = "Node(76)";
        assertEquals(intNodeAsString, intNode.toString());

        String str = String.valueOf("ABC");
        Btree.Node<String> strNode = new Btree.Node<>(str);
        String strNodeAsString = "Node(ABC)";
        assertEquals(strNodeAsString, strNode.toString());
        
        Float flt = Float.valueOf(25.53f);
        Btree.Node<Float> fltNode = new Btree.Node<>(flt);
        String fltNodeAsString = "Node(25.53)";
        assertEquals(fltNodeAsString, fltNode.toString());
    }

    @Test 
    public void main() {
        Btree.main(new String[] {});
    }
}
